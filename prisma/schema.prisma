generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  onboarded     Boolean   @default(false)
  accounts      Account[]
  chats     Chat[]
  sessions      Session[]
  lessons       Lesson[]
  progress      Progress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  content     String     
  difficulty  String
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  progress    Progress[]
}

model Progress {
  id        String   @id @default(cuid())
  lessonId  String
  userId    String
  score     Int
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  message   String   
  response  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}